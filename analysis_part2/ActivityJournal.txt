SWEN-250 Document Analysis Journal

Implement these functions in the order below.

Your name: Brian Mirabito 

================================================================
process_word
Start
Estimated Time 00 40
Plan:
(Order of implementation, testing approach, etc.)
I plan on going through the implementation steps given in the source code.
Complete
Actual Time	00 30
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
I forgot to return add_node_after_current at the end because I wasn't accounting for if the list was already populated but besides Syntax mistakes 
it wasn't too bad.
Compile attempts: 4

================================================================
get_first_word
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, etc.)
I plan on completeling the implementation that has been outlined by the instructions in the source code. As I 
usually do I will write it all out then debug it as I test.
Complete
Actual Time	00 30
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
I just needed to return the first word in the list.
Compile attempts: 3

================================================================
get_next_word
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, etc.)
I plan on following the implementation notes in the source code.
Complete
Actual Time	00 20
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
Compile attempts: 3

================================================================
get_last_word
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, etc.)
I plan on doing a similar implementation than I did with get_next_word
Complete
Actual Time	00 15
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
I ended up making it easier on myself by only haveing an if case because by setting entry to 0 originally as 
long as it failed the if case it would still return 0 as expected.
Compile attempts: 2

================================================================
get_prev_word
Start
Estimated Time	00 15
Plan:
(Order of implementation, testing approach, etc.)
Again similar implementation.
Complete
Actual Time	00 15
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
I used the same model as I have been using and similarly used my get_next_word
Compile attempt: 2

================================================================
read_file through test 56
Start
Estimated Time	00 50
Plan:
(Order of implementation, testing approach, etc.)
I plan on following the instruction in the source code as well as the project doc and referencing previous code to help me
with the word count implementation.

Complete
Actual Time	03 00
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
This took forever. First I kept on set faulting, then I was getting 
errors all over the place because word count was returning as "????". 
I was finally able to fix that with help from my TA who 
found that I was resetting the pointer each time in my create_node 
method and thus I changed that line to use strlcpy to copy the pointer.
Compile attempts: more than I can count
================================================================
read_file MLK_dream_excerpt only
Start
Estimated Time	00 10
Plan:
(Order of implementation, testing approach, etc.)
I plan on having a correct implementation of read_file
Complete
Actual Time	00 10
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
This worked because I had correctly implemented read_file.

================================================================
write_unique_word_list_to_csv_file
Start
Estimated Time	00 50
Plan:
(Order of implementation, testing approach, etc.)
I plan on following the instructions in the source code as well as using the provided hints in the project docs.

Complete
Actual Time	00 40
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
Wasn't too bad the only part that stumped me at all was the correct way to print to the file and the implementation of the loops.
Compile attempst: 6

================================================================
Add four unit tests to the unit_tests_student.c file
Start
Estimated Time	00 30
Plan:
(Order of implementation, testing approach, etc.)
I plan on using the provided tests as a reference and just do as the instructions tell me.
Complete
Actual Time	00 20
Observations:
(Lessons learned, problems encountered, obstacles overcome, etc.)
Once you know what parameters assert() takes, it was very simple to just call your functions and check for whatever the test instructed you
to test for.
Compile atemmpts: 3

================================================================
